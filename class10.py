import math

num = 0.91782

# 반올림은 자주써서 파이썬 기본 기능
# round(숫자, 자리수) : 소수 (자리수)번째까지 반올림이 된다.
print(round(num, 2))

# 내림(ceil)과 버림(floor) : math 모듈을 사용해야한다.
# 모듈사용법
# 1. import 모듈이름 << 맨위다가 작성해야합니다.
# 2. 사용법 : 모듈이름.함수이름()

# 올림(ceil)
print(math.ceil(num))
# 올림 - 소수점 자리수 표현
print(math.ceil(num*1000)/1000)

# 내림(floor)
print(math.floor(num))
# 내림 - 소수점 자리수 표현
print(math.floor(num*1000)/1000)


print("mission 1---------------------")

# 오늘 데이터 - 취조실 데이터
heartbeat = [[0.5, 1.1, 0.5, 0.8, 0.9, 0.6, 1.0, 0.7, 1.0, 0.9], [1.0, 0.9, 1.0, 1.0, 0.9, 1.0, 0.7, 1.0, 1.0, 1.0], [1.0, 2.1, 0.8, 1.4, 0.5, 0.6, 1.0, 0.4, 2.0, 1.3], [1.4, 1.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.1, 0.8, 1.3], [2.0, 2.0, 2.1, 2.2, 1.4, 1.5, 1.7, 1.8, 2.0, 1.9], [1.0, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.4, 0.9, 0.5], [1.5, 1.1, 0.8, 0.8, 0.7, 0.6, 2.0, 1.4, 1.0, 0.9], [1.4, 1.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.1, 2.0, 1.3], [1.0, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.8, 0.9, 0.9], [1.0, 2.5, 1.3, 0.8, 0.8, 0.7, 1.0, 1.4, 1.5, 1.2], [1.0, 0.9, 1.0, 1.7, 1.8, 1.0, 0.9, 1.0, 1.7, 1.8], [1.0, 2.1, 1.5, 1.4, 0.5, 0.6, 1.0, 0.4, 2.0, 1.3], [2.1, 1.7, 1.8, 2.2, 1.4, 1.4, 1.0, 0.9, 0.8, 0.8], [1.0, 1.0, 1.0, 0.8, 0.5, 1.0, 1.0, 1.1, 1.2, 1.0], [0.8, 0.7, 0.9, 0.6, 0.5, 0.6, 0.3, 0.2, 0.3, 0.6], [0.9, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.8, 0.9, 0.3]]


# 건강검진 기록 - 편안한상태
normal = [
  [0.8, 0.1, 0.4, 0.2, 0.1, 0.1, 0.4, 0.2, 0.1, 0.6],
  # 리스트안의 있는 값을 모두 더해서 / 행내부리스의 크기만큼 나눠줍니다.
  [0.5, 0.5, 0.9, 0.1, 0.5, 0.1, 0.5, 0.1, 0.6, 0.5],
  [0.9, 0.1, 0.1, 0.3, 0.3, 0.7, 0.8, 0.4, 0.1, 0.4],
  [0.1, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.6, 0.6, 0.5],
  [0.6, 0.8, 0.6, 0.4, 0.9, 0.9, 0.5, 0.3, 0.3, 0.4],
  [0.2, 0.1, 0.7, 0.7, 0.2, 0.4, 0.7, 0.9, 0.2, 0.1],
  [0.8, 0.2, 0.7, 0.3, 0.9, 0.3, 0.9, 0.7, 0.3, 0.5],
  [0.9, 0.7, 0.2, 0.2, 0.1, 0.2, 0.4, 0.2, 0.3, 0.9],
  [0.2, 0.9, 0.8, 0.1, 0.1, 0.7, 0.1, 0.2, 0.5, 0.6],
  [0.8, 0.2, 0.1, 0.6, 0.7, 0.6, 0.1, 0.9, 0.4, 0.4],
  [0.4, 0.3, 0.9, 0.9, 0.9, 0.2, 0.4, 0.1, 0.4, 0.8],
  [0.2, 0.6, 0.7, 0.8, 0.6, 0.9, 0.7, 0.6, 0.2, 0.6],
  [0.9, 0.6, 0.3, 0.5, 0.2, 0.3, 0.8, 0.9, 0.5, 0.8],
  [0.8, 0.7, 0.8, 0.9, 0.1, 0.8, 0.7, 0.1, 0.9, 0.1],
  [0.2, 0.9, 0.7, 0.9, 0.5, 0.8, 0.2, 0.5, 0.7, 0.9],
  [0.7, 0.6, 0.4, 0.8, 0.4, 0.3, 0.6, 0.5, 0.5, 0.7]
]

print(len(heartbeat))
print(len(normal))

# 동일한 기능들이 재사용된다 => 함수 만들어주면된다.
# 무슨 함수?
# - 데이터가 하나 들어오면(입력, 이차원리스트) 평균을 결과값(결과)으로 뽑아주는 함수


# * 수학 문제
# 평균 = 모든 수의 합 / 갯수



# 함수이름 만들기 - 성공 
# -입력값 : 리스트
# 평균 구하는 함수
def a(e):
  # 부동소숫점 문제 - 소수 문제를 풀때는 버리거나, 올리거나, 반올림하거나
  jj = []
  for h in e:
    # 평균 = 합계 / 갯수
    # 반올림해서 소숫점 한자리수까지 표현하고 싶다. 
    # print(sum(h) / len(h))

    #print(round(sum(h) / len(h),1))
    # sum(h) : 행의 합
    # h의 크기로 나눴습니다.
    jj.append(round(sum(h) / len(h),1))
  # print(jj)

    # append는 평균 결과를 삽입할때
  #print(jj)

    # print(sum(h[1]))


  return jj





# 함수 호출
print(a(heartbeat))
print(a(normal))


# * 수학 문제
# 평균 = 모든 수의 합 / 갯수

# 이 데이터로 한번더 평균을 구해야한다.
hat = a(heartbeat)
jung = a(normal)
print(round(sum(hat) / len(hat),1))

print(round(sum(jung) / len(jung),1))
# 1행 값을 모두 더한 값 / 1행의 len

# 리스트 합계 sum(리스트이름)




print("------mission 2-----------------------")
# 중학교 수학
# 편차 : 

# 취조실에서의 평균 심박수를 변수에 저장하자.
heartbeat = [[0.5, 1.1, 0.5, 0.8, 0.9, 0.6, 1.0, 0.7, 1.0, 0.9], [1.0, 0.9, 1.0, 1.0, 0.9, 1.0, 0.7, 1.0, 1.0, 1.0], [1.0, 2.1, 0.8, 1.4, 0.5, 0.6, 1.0, 0.4, 2.0, 1.3], [1.4, 1.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.1, 0.8, 1.3], [2.0, 2.0, 2.1, 2.2, 1.4, 1.5, 1.7, 1.8, 2.0, 1.9], [1.0, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.4, 0.9, 0.5], [1.5, 1.1, 0.8, 0.8, 0.7, 0.6, 2.0, 1.4, 1.0, 0.9], [1.4, 1.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.1, 2.0, 1.3], [1.0, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.8, 0.9, 0.9], [1.0, 2.5, 1.3, 0.8, 0.8, 0.7, 1.0, 1.4, 1.5, 1.2], [1.0, 0.9, 1.0, 1.7, 1.8, 1.0, 0.9, 1.0, 1.7, 1.8], [1.0, 2.1, 1.5, 1.4, 0.5, 0.6, 1.0, 0.4, 2.0, 1.3], [2.1, 1.7, 1.8, 2.2, 1.4, 1.4, 1.0, 0.9, 0.8, 0.8], [1.0, 1.0, 1.0, 0.8, 0.5, 1.0, 1.0, 1.1, 1.2, 1.0], [0.8, 0.7, 0.9, 0.6, 0.5, 0.6, 0.3, 0.2, 0.3, 0.6], [0.9, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.8, 0.9, 0.3]]

normal = [
  [0.8, 0.1, 0.4, 0.2, 0.1, 0.1, 0.4, 0.2, 0.1, 0.6],
  [0.5, 0.5, 0.9, 0.1, 0.5, 0.1, 0.5, 0.1, 0.6, 0.5],
  [0.9, 0.1, 0.1, 0.3, 0.3, 0.7, 0.8, 0.4, 0.1, 0.4],
  [0.1, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.6, 0.6, 0.5],
  [0.6, 0.8, 0.6, 0.4, 0.9, 0.9, 0.5, 0.3, 0.3, 0.4],
  [0.2, 0.1, 0.7, 0.7, 0.2, 0.4, 0.7, 0.9, 0.2, 0.1],[0.8, 0.2, 0.7, 0.3, 0.9, 0.3, 0.9, 0.7, 0.3, 0.5],[0.9, 0.7, 0.2, 0.2, 0.1, 0.2, 0.4, 0.2, 0.3, 0.9],[0.2, 0.9, 0.8, 0.1, 0.1, 0.7, 0.1, 0.2, 0.5, 0.6],[0.8, 0.2, 0.1, 0.6, 0.7, 0.6, 0.1, 0.9, 0.4, 0.4],[0.4, 0.3, 0.9, 0.9, 0.9, 0.2, 0.4, 0.1, 0.4, 0.8],[0.2, 0.6, 0.7, 0.8, 0.6, 0.9, 0.7, 0.6, 0.2, 0.6],[0.9, 0.6, 0.3, 0.5, 0.2, 0.3, 0.8, 0.9, 0.5, 0.8],[0.8, 0.7, 0.8, 0.9, 0.1, 0.8, 0.7, 0.1, 0.9, 0.1],[0.2, 0.9, 0.7, 0.9, 0.5, 0.8, 0.2, 0.5, 0.7, 0.9],[0.7, 0.6, 0.4, 0.8, 0.4, 0.3, 0.6, 0.5, 0.5, 0.7]]

heb = heartbeat 
hat_two = round(sum(hat) / len(hat),1) # 평균



print('-')

# 편차구하는 함수 t()
def t(d, p):
  # - 입력값 : 데이터와, 평균
  # - 결과값 : 편차= 평균-데이터(절대값, 마이너스부호가 없어지는 것)
  return round(abs(p - d),1)

for h in range(len(heb)):
  for i in range(len(heb[h])):
    # print(heb[h][i])
    # t(heb[h][i], hat_two) 
    # 편차값이 1.0보다 큰 구간을 찾아라
    if t(heb[h][i], hat_two) > 1.0:
      print("편차:",t(heb[h][i], hat_two), h )

#print(t(1.8,hat_two))





